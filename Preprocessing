import os
import csv
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from tqdm import tqdm
from minisom import MiniSom

tqdm.pandas()

def convert(yearDay, timeOfDay):
    yearDay = f"{yearDay:07.0f}"
    year = int(str(yearDay)[:4])
    day = int(str(yearDay)[4:])
    time = timedelta(seconds=int(timeOfDay))
    return datetime(year, 1, 1) + timedelta(days=day - 1) + time

def fixNaN(df):
    for col in df.columns:
        if df[col].isnull().any():
            df[col] = df[col].fillna((df[col].shift(1) + df[col].shift(-1)) / 2)
    return df

def processFile(file):
    df = pd.read_excel(file)  
    df['DateTime'] = df.progress_apply(lambda row: convert(row['Year/Day'], row['Time of Day']), axis=1)
    df = df.dropna(subset=['DateTime'])
    columns = [col for col in df.columns if col not in ['Year/Day', 'Time of Day']]
    df = df[columns]
    return fixNaN(df)

def processFolder(folder):
    allData = []
    files = os.listdir(folder)
    for file in tqdm(files, desc="Processing Files"):
        file = os.path.join(folder, file)
        processedData = processFile(file)
        if processedData is not None and not processedData.empty:
            allData.append(processedData)
    return pd.concat(allData, ignore_index=True)


def processSlidingWindow(df, windowSize, batchPercent):
    totalRows = len(df) - windowSize
    batchSize = max(1, int(totalRows * (batchPercent // 100)))
    numOfBatches = (totalRows + batchSize - 1) // batchSize
    cols = [f'V[{i+1}]' for i in range(windowSize)] + ['Start Time', 'End Time']
    with open('SlidingWindow.csv', 'w', newline = '') as f:
        writer = csv.writer(f)
        writer.writerow(cols)
        for batchStart in tqdm(range(0, totalRows, batchSize), total = numOfBatches, desc = 'Processing Batches'):
            batchEnd = min(batchStart + batchSize + windowSize, len(df))
            batch = df.iloc[batchStart:batchEnd]
            timestamps = batch['DateTime']
            values = batch.drop(['DateTime'], axis = 1)
            rows = []
            for start in range(min(batchSize, len(values) - windowSize)):
                end = start + windowSize
                windowValues = values.iloc[start:end].values.flatten()
                startTime = timestamps.iloc[start]
                endTime = timestamps.iloc[end - 1]
                rows.append(list(windowValues) + [startTime, endTime])
            writer.writerows(rows)
        print("Sliding window saved as 'SlidingWindowTable.csv'")
            




folder = "C:/Users/aryam/OneDrive/Desktop/SatelliteData"
combinedFile = 'combinedFile.csv'

if os.path.exists(combinedFile):
    print(f"Loading existing combined data from {combinedFile}")
    combineData = pd.read_csv(combinedFile, parse_dates=['DateTime'])
    combineData = fixNaN(combineData)
else:
    print(f"Processing folder: {folder}")
    combineData = processFolder(folder)
    combineData = combineData.sort_values('DateTime')
    combineData.to_csv(combinedFile, index=False)
    print(f"Combined data saved to {combinedFile}")

windowSize = 60

sliding_window_table = processSlidingWindow(combineData, windowSize, 5)


print("Processing complete.")
